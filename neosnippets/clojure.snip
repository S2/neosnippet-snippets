snippet     defn-doc
abbr        defn function "..." [...] ...
options     head
	(defn ${1:name}
		"${2:doc}"
		[${3}]
		${0})

snippet     try
abbr        (try ... (catch ...
	(try
		${1}
		(catch ${2:Exception} e ${3:nil}))

snippet     ref-set
abbr        (dosync (ref-set ...
options     head
	(dosync
		(ref-set ${1:ref} ${2:value}))

# http://tnoda-clojure.tumblr.com/post/24969285880/clojure-scripting
snippet     shebang
options     head
	#^:shebang '[
	exec java -cp \`locate clojure- | grep -P "clojure-[\\d\\.]+\\.jar$" | tail -1\` clojure.main "\$0"
	]
	

snippet     warn
options     head
  (binding [*out* *err*]
    (println ${0:TARGET}))

snippet fn
	(defn ${1} [${2}])

snippet l
	(let [
		${1} ${2} ,
	] ${3})

snippet f
	
	(loop [i 0]
		(when (< i ${1})
			${2}
			(recur (inc i))
		)
	)

snippet i
	(if (${1})
		${2}
		${3}
	)

snippet in
	(insert media_user_segment_parameter
		(values[
				${1}
			]
		)
	)

snippet de
	${1} (delete ${2}
		(where (and (= :${4} ${5}))))

snippet se
	${1} (select ${2}
		(fields :${3})
		(where (and (= :${4} ${5}))))

snippet si
	${1} (select ${2}
		(fields :${3})
		(where (and (= :${4} ${5})))
		(limit 1))

snippet up
	(update ${1}
		(set-fields {:${2} ${3}})
		(where {:${4} ${5}})
	)
