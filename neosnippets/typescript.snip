snippet c
	export default class extends ${3}{
		/**
		 * <br>
		 *
		 * @class $1.$2
		 * @extends $3
		 * @constructor 
		 * @param {} 
		 */
		constructor(){
		}
	}

snippet i
	interface ${1}{
		${2} : ${3};
	}

snippet pr
	private ${1}(){
	}

snippet pu
	/**
		<br>
		
		@method ${1} 
		@param {} 
		@return ${2}
	*/
	public $1():$2{
	}

snippet pt
	/**
		<br>
		
		@method ${1} 
		@param {} 
		@return ${2}
	*/
	protected $1():$2{
	}

snippet l
	${1}s.forEach(($1)=>{
		${2}
	})

snippet m
	${1}s.map(($1)=>{
		${2}
	})

snippet g
	${1}s.filter(($1)=>{
		${2}
	})

snippet ge
	let ${1} = document.getElementById("${2}")

snippet cr
	let ${1} = document.createElement("${2}")

snippet ae
	${1}.addEventListener("click" , (e : Event)=>{})

snippet e 
	(ReactDom.findDOMNode(this.refs.${1}) as HTML${2}Element) 

snippet re 
	import * as React from 'react'
	import * as ReactDom from 'react-dom'
	import "./${1}.sass"
	
	interface Props {
		
	}
	
	interface State {
		
	}
	
	export default class extends React.Component<Props , State> {
		constructor(props : Props){
			super(props)
			this.state = {
			}
		}
		
		render() {
			return (
				${2}
			);
		}
	}

snippet ti
	setTimeout(()=>{
		
	} , 1000)

snippet in
	let intervalId = setInterval(()=>{
		
		clearInterval(intervalId)
	} , 1000)

snippet el
	${1} : HTML${3}Element = <HTML$3Element>document.getElementById("${2}")

snippet xhr
	let url = ""
	let xhr = new XMLHttpRequest();
	xhr.open("POST" , url , true)
	xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	let json = encodeURIComponent(this.getJSON());
	xhr.addEventListener("readystatechange" , ()=>{
		if (xhr.readyState === 4 && xhr.status === 200){
			let result = JSON.parse(xhr.responseText);
		}
	});
	xhr.send('json=' + json);

snippet enum
	enum ${1} {
		${2} ,
	}

snippet d
	console.log(${1})

snippet f
	(ReactDom.findDOMNode(this.refs.${1}) as HTMLInputElement).value

snippet fc
	import * as React from 'react'
	import * as ReactDom from 'react-dom'
	import "./${1}.sass"
	
	interface Props {
		
	}
	
	export default function (props : Props){
		return <${2}>{props.children}</$2>
	}
	

snippet gr
	import {MultipleQuery} from "./Model/GraphQL";
	import {${1}}      from "./Model/GraphQL/Queries";

snippet gc
	new MultipleQuery((e) => {
		} , new ${1}(
			{} ,
			["all"],
			(${2}) => {
				this.setState({$2})
			}
		)
	)

